// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashmongodbs.v1.yaml
// installer.stash.appscode.com_stashmongodbs.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashmongodbsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x93\x23\x35\x0c\xbd\xe7\x57\xa8\x8a\xc3\x5e\x48\xa7\x86\xa5\x28\xaa\x6f\x90\xe5\xb0\x05\x0b\xd4\x66\x6b\xef\x8a\x5b\xe9\x88\x71\xdb\x46\x92\xc3\x0c\xbf\x9e\xb2\xbb\x33\x93\xf4\x64\x02\x33\xc5\xfa\x14\xeb\xe3\x59\x7a\xcf\x72\x07\x13\x7f\x26\x51\x8e\xa1\x05\x4c\x4c\x77\x46\xa1\xec\xb4\xb9\xfd\x5e\x1b\x8e\xab\xc3\xcd\xe2\x96\x43\xd7\xc2\x3a\xab\xc5\xe1\x23\x69\xcc\xe2\xe8\x1d\xed\x38\xb0\x71\x0c\x8b\x81\x0c\x3b\x34\x6c\x17\x00\x4e\x08\x8b\xf1\x13\x0f\xa4\x86\x43\x6a\x21\x64\xef\x17\x00\x1e\xb7\xe4\xb5\xc4\x00\x60\x4a\x2d\xa8\xa1\xee\x17\x00\x01\x07\x9a\x76\x43\x0c\x7d\xec\xb6\xda\x70\x50\x43\xef\x49\x9a\x6a\x6f\x30\x25\x75\xb1\xa3\xc6\xc5\x61\xa1\x89\x5c\xc1\xe9\x25\xe6\xd4\xc2\xd5\xd8\x11\x7e\x3a\xd6\xa1\x51\x1f\x85\x8f\xfb\xe5\x43\x0d\xe5\xf7\x31\xaf\x6e\xc7\x96\x37\xc5\xfd\xa1\x14\xf5\xee\xc7\x6a\xf6\xac\xf6\xf3\x13\xd7\x2f\xac\x56\xdd\xc9\x67\x41\x3f\x6b\xa6\x7a\x94\x43\x9f\x3d\xca\xb9\x6f\x01\xa0\x2e\x26\x6a\xe1\xd7\x52\x65\x42\x47\xdd\x02\xe0\x30\x0a\x52\xab\x5c\x4e\xfc\x1c\x6e\xd0\xa7\x3d\xde\x8c\x68\x6e\x4f\x03\x8e\x4d\x00\xc4\x44\xe1\x87\xdf\xdf\x7f\x7e\xbb\x39\x33\x03\x24\x89\x89\xc4\x1e\xfa\x1d\xd7\x89\xe2\x27\x56\x80\x8e\xd4\x09\x27\xab\x57\xe1\x4d\x01\x1c\xa3\xa0\x2b\x52\x93\x82\xed\xe9\x58\x1a\x75\x53\x0d\x10\x77\x60\x7b\x56\x10\x4a\x42\x4a\xc1\xaa\xfc\x67\xc0\x50\x82\x30\x40\xdc\xfe\x41\xce\x1a\xd8\x90\x14\x18\xd0\x7d\xcc\xbe\x03\x17\xc3\x81\xc4\x40\xc8\xc5\x3e\xf0\xdf\x0f\xd8\x0a\x16\xeb\xa1\x1e\x8d\x26\x86\x1f\x17\x07\x23\x09\xe8\xe1\x80\x3e\xd3\xd7\x80\xa1\x83\x01\xef\x41\xa8\x9c\x02\x39\x9c\xe0\xd5\x10\x6d\xe0\x43\x14\x02\x0e\xbb\xd8\xc2\xde\x2c\x69\xbb\x5a\xf5\x6c\xc7\x9b\xee\xe2\x30\xe4\xc0\x76\xbf\x72\x31\x98\xf0\x36\x5b\x14\x5d\x75\x74\x20\xbf\x52\xee\x97\x28\x6e\xcf\x46\xce\xb2\xd0\x0a\x13\x2f\x6b\xe9\xc1\xea\xb8\x0c\xdd\x57\x32\xcd\x86\xbe\x39\xab\xd5\xee\x53\xbd\xe0\xc2\xa1\x3f\x71\xd4\x2b\x76\x45\x81\x72\xcf\x80\x15\x70\x4a\x1d\xbb\x78\x24\xba\x98\x0a\x3b\x1f\x7f\xda\x7c\x82\xe3\xd1\x55\x8c\x39\xfb\x95\xf7\xc7\x44\x7d\x94\xa0\x10\xc6\x61\x47\x32\x8a\xb8\x93\x38\x54\x4c\x0a\x5d\x8a\x1c\xac\x6e\x9c\x67\x0a\x73\xfa\x35\x6f\x07\xb6\xa2\xfb\x9f\x99\xd4\x8a\x56\x0d\xac\x31\x84\x68\xb0\x25\xc8\xa9\x43\xa3\xae\x81\xf7\x01\xd6\x38\x90\x5f\xa3\xd2\x17\x17\xa0\x30\xad\xcb\x42\xec\x7f\x93\xe0\xf4\xe5\x9a\x07\x8f\xac\x9d\x38\x8e\xcf\xce\x33\x7a\x9d\x3e\x08\x9b\x44\xae\x48\x57\xd8\x9b\xe6\x64\x17\x65\x0c\x81\x29\x66\xba\x94\xb0\x63\x4f\x67\xa8\x97\xa7\xb6\xac\x2d\xba\xdb\x9c\xe6\xd6\x6b\x19\x65\xa1\xf4\x17\xed\xcf\xb2\x72\x95\x85\xb2\x76\xd9\xfb\xf2\x2a\xfd\x76\x20\x11\xee\xe8\x29\xfa\x15\x64\x1e\xb0\xbf\x90\x71\xbd\x07\xa1\x9e\xd5\xe4\xfe\x15\x7d\x94\xe4\x14\x95\x2d\xbe\x32\xdd\xb0\x7f\x45\x5e\x99\x0b\x16\xea\x9e\xa6\x2e\x1f\xba\xb9\xe8\x3a\xd6\x7a\xc1\x69\xf8\x22\x99\x06\xbc\x5b\xc7\xe0\xb2\x08\x05\x77\xa1\xf7\x5d\x94\x01\xad\x7c\x40\xed\xed\x37\xcf\x00\x97\x57\xb6\x27\x99\x79\x5f\x2d\xbe\x90\x5a\x94\x17\xcb\xff\xff\x5f\xe1\xbf\x90\xad\xfc\x47\x89\xd9\xae\x12\xf3\xdd\xb7\x2f\x20\xe6\xb2\xe6\xcb\x69\x6e\x67\xc6\x3a\x07\x33\xdb\xb9\x62\x33\xe7\xc4\xdd\xcc\x7a\xd2\xc8\xbf\x3f\x62\x4f\x8c\x5a\xbe\x03\x5d\x0b\x26\x79\x04\x2e\x47\x94\xf9\x1c\x2d\xff\x04\x00\x00\xff\xff\xa9\x5f\x6f\xb5\x1d\x0a\x00\x00")

func installerStashAppscodeCom_stashmongodbsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmongodbsV1Yaml,
		"installer.stash.appscode.com_stashmongodbs.v1.yaml",
	)
}

func installerStashAppscodeCom_stashmongodbsV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmongodbsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmongodbs.v1.yaml", size: 2589, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashmongodbsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\x1c\x45\x0c\x7e\xbf\xbf\xc2\x12\x48\x05\xc4\xde\x11\x82\x2a\xd8\x17\x04\x29\x48\x15\x2d\xa0\xa6\xf4\x25\x2a\x92\x6f\xd6\xb7\x67\x32\x3b\x33\xd8\xde\x6b\x92\xbf\x1e\xcd\xec\xde\xe5\x7e\x86\x04\xd1\x79\xba\xf9\xec\xf1\xd8\xdf\x67\xcf\x2d\x26\x7e\x47\xa2\x1c\x43\x0d\x98\x98\x6e\x8c\x42\xde\xe9\xf4\xfa\x5b\x9d\x72\x9c\xad\xce\xe6\x64\x78\x36\xb9\xe6\xd0\xd4\x70\xd1\xab\xc5\xee\x0d\x69\xec\xc5\xd1\x0b\x5a\x70\x60\xe3\x18\x26\x1d\x19\x36\x68\x58\x4f\x00\x9c\x10\x66\xf0\x2d\x77\xa4\x86\x5d\xaa\x21\xf4\xde\x4f\x00\x3c\xce\xc9\x6b\xf6\x01\xc0\x94\x6a\x50\x43\x5d\x4e\x00\x02\x76\x34\xee\xba\x18\xda\xd8\xcc\x75\xca\x41\x0d\xbd\x27\x99\x16\x7c\x8a\x29\xa9\x8b\x0d\x4d\x5d\xec\x26\x9a\xc8\xe5\x38\xad\xc4\x3e\xd5\xf0\xa0\xef\x10\x7e\xbc\xd6\xa1\x51\x1b\x85\xd7\xfb\x6a\x93\x43\xfe\xbd\x3e\x57\xb6\x43\xc9\x97\xd9\xfc\x3a\x27\xf5\xe2\xc7\x02\x7b\x56\xfb\xe5\xc0\xf4\x8a\xd5\x8a\x39\xf9\x5e\xd0\xef\x15\x53\x2c\xca\xa1\xed\x3d\xca\xae\x6d\x02\x90\x84\x94\x64\x45\x7f\x84\xeb\x10\x3f\x84\x9f\x99\x7c\xa3\x35\x2c\xd0\x6b\xce\x44\x5d\x4c\x54\xc3\xaf\xb9\x88\x84\x8e\x9a\x09\xc0\x0a\x3d\x37\x85\xe5\xa1\x8c\x98\x28\xfc\xf0\xfb\xcb\x77\xe7\x97\x6e\x49\x1d\x0e\x60\x8e\x1c\x13\x89\x6d\xaa\x1d\x88\xdf\x48\xbe\xc1\x00\x1a\x52\x27\x9c\x4a\x44\x78\x96\x43\x0d\x3e\xd0\x64\x91\x49\xc1\x96\x04\xab\x01\xa3\x06\xb4\x5c\x03\x71\x01\xb6\x64\x05\xa1\x52\x43\xb0\x92\xd2\x56\x58\xc8\x2e\x18\x20\xce\xff\x22\x67\x53\xb8\xcc\x75\x8a\x82\x2e\x63\xef\x1b\x70\x31\xac\x48\x0c\x84\x5c\x6c\x03\xdf\x6d\x22\x2b\x58\x2c\x57\x7a\x34\x1a\x99\x5d\x2f\x0e\x46\x12\xd0\x67\x12\x7a\xfa\x12\x30\x34\xd0\xe1\x2d\x08\xe5\x3b\xa0\x0f\x5b\xd1\x8a\x8b\x4e\xe1\x75\x14\x02\x0e\x8b\x58\xc3\xd2\x2c\x69\x3d\x9b\xb5\x6c\xeb\x26\x77\xb1\xeb\xfa\xc0\x76\x3b\x73\x31\x98\xf0\xbc\xb7\x28\x3a\x6b\x68\x45\x7e\xa6\xdc\x56\x28\x6e\xc9\x46\xce\x7a\xa1\x19\x26\xae\x4a\xe2\xc1\xca\xa4\x74\xcd\x27\x32\x4e\x84\x3e\xdb\xca\xd4\x6e\x53\x69\x6a\xe1\xd0\x6e\xe0\xd2\x54\x27\x79\xcf\x7d\x05\xac\x80\xe3\xb1\x21\xff\x7b\x7a\x33\x94\x59\x79\xf3\xd3\xe5\x5b\x58\x5f\x5a\x24\xd8\xe5\xbc\xb0\x7d\x7f\x4c\xef\x89\xcf\x44\x71\x58\x90\x0c\xc2\x2d\x24\x76\x25\x22\x85\x26\x45\x0e\x56\x36\xce\x33\x85\x5d\xd2\xb5\x9f\x77\x6c\x59\xe9\xbf\x7b\x52\xcb\xfa\x4c\xe1\x02\x43\x88\x06\x73\x82\x3e\x35\x68\xd4\x4c\xe1\x65\x80\x0b\xec\xc8\x5f\xa0\xd2\x47\xa7\x3d\x33\xac\x55\xa6\xf4\xdf\x89\xdf\x7e\xa1\xd6\xeb\xd8\x78\xe4\x55\x9e\xa3\x1d\x04\xa0\xc3\x9b\x57\x14\x5a\x5b\xd6\xf0\xfc\x7c\xcf\x96\xd0\x72\x4b\xd6\xf0\xe7\x15\x56\x77\xef\x3f\xbb\xaa\xb0\xba\xfb\xaa\xfa\xee\xfd\x17\x57\xe3\x8f\xcf\xbf\xff\x74\xef\xcc\xd1\x24\xd7\xf0\x20\xe0\x06\x5e\xbf\x76\x47\x9b\x66\xfb\x15\xba\x4c\xe4\x72\xff\x64\x11\xc7\x11\x5d\x44\x19\x5c\x60\xf4\x19\x67\x02\x16\xec\xe9\x11\x5c\xcc\xd1\x5d\xf7\x69\x9f\x8d\x53\xde\x79\xa1\xb4\x47\xd0\x93\x15\x9f\xac\x3a\xaf\x45\xef\x7d\x56\xe3\xb7\x15\x89\x70\x73\xa0\xca\xc9\x98\xdc\x61\x7b\xe0\xfd\x50\xd6\x42\x2d\xab\xc9\xed\x13\x33\xcf\x07\x53\x54\xb6\xf8\x1f\x8e\x1a\xb6\x4f\x3c\x93\xc7\x8f\x85\x9a\xfd\x63\xd5\x26\xff\x23\x86\x75\x7e\x07\x26\xc3\x47\x0b\xd1\xe1\xcd\x45\x0c\xae\x17\xa1\xe0\x0e\x2a\x5d\x44\xe9\xd0\xf2\xff\xb0\x9d\x7f\x7d\x34\x64\x7e\xb4\x5b\x92\x83\x31\x7b\xb2\xb0\x42\x6a\x51\x9e\x24\xed\xff\xd9\x90\x1f\x90\x2d\x7f\xd8\xc4\xde\x1e\x20\xe1\xf9\x37\x8f\x24\xe1\x98\x9e\xd5\x38\x73\x3b\x50\xe9\xe7\x1d\x64\x57\x91\x1d\xd3\xc8\xd1\x0e\xb6\x95\xf8\xc3\xcf\xcd\x1e\xb4\x5a\x7f\x1e\xae\xce\xd0\xa7\x25\x9e\xdd\x63\x85\xd4\x6a\xfc\x78\xdb\x32\x03\x94\xcf\x99\xa6\x06\x93\x7e\xc8\x22\xe7\x93\x07\x72\x40\xfe\x09\x00\x00\xff\xff\x0e\xa0\x5f\xfb\x76\x0a\x00\x00")

func installerStashAppscodeCom_stashmongodbsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmongodbsYaml,
		"installer.stash.appscode.com_stashmongodbs.yaml",
	)
}

func installerStashAppscodeCom_stashmongodbsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmongodbsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmongodbs.yaml", size: 2678, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashmongodbs.v1.yaml": installerStashAppscodeCom_stashmongodbsV1Yaml,
	"installer.stash.appscode.com_stashmongodbs.yaml":    installerStashAppscodeCom_stashmongodbsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashmongodbs.v1.yaml": {installerStashAppscodeCom_stashmongodbsV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashmongodbs.yaml":    {installerStashAppscodeCom_stashmongodbsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
